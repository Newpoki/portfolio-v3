import axios, { AxiosRequestConfig, AxiosResponse } from "axios";

/** Available strapi backend API locale code */
export type ILocaleCode = "fr-FR" | "en-GB";

/** Available strapi backend API order */
export type ISortOrder = "ASC" | "DESC";

/** This interface is extended by every data that comes from the strapi backend API */
export interface IGenericApiResponse {
  /** The element unique id.
   * Automatically generated by strapi.
   * The same as `id` key, but prefixed with an underscore by strapi to say it's an unique key */
  _id: string;

  /** The locale code of the fetched data */
  locale: ILocaleCode;

  /** The data's creation date  */
  createdAt: string;

  /** The data's updated date. Same as `createdAt` if it has never been updated */
  updatedAt: string;

  /** The version number. This is only present if the content is set to have a versioning in strapi */
  __v?: number;

  /** The element unique id.
   * Automatically generated by strapi. */
  id: string;
}

/** This is in every strapi localized data, stored in the `localizations` key */
export type IStrapiLocalization = Array<{
  /** The locale unique id.
   * Automatically generated by strapi.
   * The same as `id` key, but prefixed with an underscore by strapi to say it's is an unique key. */
  _id: string;

  /** The  lcoale unique id. Automatically generated by strapi */
  id: string;

  /** The locale code */
  locale: ILocaleCode;
}>;

/** This interface is extended by every **localized** data that comes from the strapi backend API */
export type IGenericLocalizedApiResponse = IGenericApiResponse & {
  localizations: IStrapiLocalization;
};

/**
 * Handle the API request to the backend
 * @param {AxiosRequestConfig} config The API call config options
 */
export const api = async function <TRequestData>(
  config: AxiosRequestConfig
): Promise<AxiosResponse<TRequestData>> {
  return await axios({
    ...config,
    baseURL: process.env.REACT_APP_API_BASE_URL,
  });
};
